%  PT Parser Version 5.0
%
% Date:  30 Jun 1980
%        (Revised v5.0 - 10 Dec 2020)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pChoose
        firstKeywordToken = pChoose
        pElseif
        pFun
        pIs
        pLike
        pPkg
        pPublic
        pUsing
        pVal
        pWhen
        % All of the above keyword tokens were added
        pOr                     'or'
        pAnd                    'and'
        pNot                    'not'
        pThen                   'then'
        pElse                   'else'
        pOf                     'of'
        pEnd                    'end'
        pFile                   'file'
        pVar                    'var'
        pIf                     'if'
        pWhile                  'while'
        pRepeat                 'repeat'
        lastKeywordToken = pRepeat 

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pSlash                  '/'
        pPercent                '%'
        pHash                   '#'
        pOrBar                  '|'
        pDoubleOrBar            '||'
        pPlusEquals             '+='
        pMinusEquals            '-='
        pStarEquals             '*='
        pSlashEquals            '/='
        pPercentEquals          '%='
        pDoubleEquals           '=='
        % All of the above syntax tokens were added
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        pColonEquals            ':='
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '='
        pNotEqual               '!='        %Changed to != from <>
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        pDotDot                 '..'
        lastSyntaxToken = pDotDot;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sLike       % Changed from sType to sLike
        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        sRepeatStmt
        sRepeatEnd
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine
        % All output tokens below were added (aside from sEndOfFile)
        sPackage
        sPublic
        sConcatenate
        sRepeatString
        sSubstring
        sLength
        sInitialValue
        sCaseElse
        sEndOfFile
        lastSemanticToken = sEndOfFile;


rules

Program :
        'using'  .sProgram
        % program name
        pIdentifier
        % program parameters
        '{'
        {
            pIdentifier  .sIdentifier
            [
                | ',':
                | *:
                    >
            ]
        }
        '}'
        .sParmEnd
        ';'  @Block  '.';

Block :
        % Merged statement and beginStmt rule into block rule -T 
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.
        .sBegin
        {[
            | 'pkg': % Added pkg identifier here
                .sPackage
                @Package
            | 'const': % Will need to change as 'const' has been removed -> change to 'val'?
                .sConst
                @ConstantDefinitions
            | 'type': % Will need to change as 'type' has been removed
                .sType
                @TypeDefinitions
            | 'var':
                .sVar
                @VariableDeclarations
            | 'procedure': % Will need to change as 'procedure' has been removed
                .sProcedure
                % procedure name
                pIdentifier  .sIdentifier
                @ProcedureHeading
                @Block  ';'
            % Merged statement rule below, with changes for 'choose' and 'repeat'
            | pIdentifier:
                @AssignmentOrCallStmt
            | 'if':
                @IfStmt
            | 'choose': % Changed from 'case' to Like's 'choose'
                @ChooseStmt
            | 'repeat': % We have 'repeat while <cond> ...' = WhileStmt and 'repeat ... while <cond>' = RepeatStmt
                [
                    | pWhile:
                        @WhileStmt
                    | *:
                        @RepeatStmt
                ]
            | ';':
                .sNullStmt
            | *:
                >
        ]}
        .sEnd;

Package :
        % Package rule handle parsing of Like pkg
        % Assumes that 'pkg' has been identified and sPackage has already been emitted
        
        % Parse identifier (package name)
        pIdentifier .sIdentifier
        pIs
        @Block
        % Block will have emitted sBegin, DeclarationsAndStatements, and sEnd,
        % but we still need to ensure the 'end;' terminates the pkg
        pEnd
        pSemicolon

ConstantDefinitions :
        % Accept one or more named constant definitions
        pIdentifier  .sIdentifier
        '=' @ConstantValue ';'
        {[
            | pIdentifier:
                .sIdentifier
                '=' @ConstantValue ';'
            | *:
                >
        ]};

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

TypeDefinitions :
        % Accept one or more named type definitions.
        pIdentifier  .sIdentifier
        '='  @TypeBody  ';'
        {[
            | pIdentifier:
                .sIdentifier
                '='  @TypeBody  ';'
            | *:
                >
        ]};

TypeBody :
        [
            | 'array':
                .sArray
                '['  @SimpleType  ']'
                'of'  @SimpleType
            | 'file':
                .sFile
                'of'  @SimpleType
            | *:
                @SimpleType
        ];

SimpleType :
        % A simple type is a named type (possibly predefined)
        % or a subrange type specification
        [
            | pIdentifier:
                .sIdentifier
                [
                    | '..':
                        .sRange         %% this may be unnecessary
                        @OptionallySignedIntegerConstant
                    | *:
                ]
            | *:
                @OptionallySignedIntegerConstant
                '..'  .sRange
                @OptionallySignedIntegerConstant
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more variable declarations.
        pIdentifier  .sIdentifier
        ':'  @TypeBody  ';'
        {[
            | pIdentifier:
                .sIdentifier
                ':'  @TypeBody  ';'
            | *:
                >
        ]};

ProcedureHeading :
        % Accept zero or more procedure formal parameter declarations.
        [
            | '(':
                {
                    % formal parameter identifier
                    [
                        | 'var':
                            pIdentifier  .sIdentifier
                            .sVar
                        | *:
                            pIdentifier  .sIdentifier
                    ]
                    ':'
                    % type identifier
                    pIdentifier  .sIdentifier
                    [
                        | ';':
                        | *:
                            >
                    ]
                }
                ')'
            | *:
        ]
        ';'
        .sParmEnd;

AssignmentOrCallStmt :
        [
            | ':=':
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  ':='
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        'then'  .sThen
        @Statement
        [
            | 'else':
                .sElse
                @Statement
            | *:
        ];

ChooseStmt :
        % Choose statement replaces the PT case statement.
        % Assumes the 'choose' keyword has already been consumed
        .sCaseStmt
        @Expression
        .sExpnEnd
        pOf

        % We know there will be at least one ChooseAlternative following 'of'
        pWhen
        @ChooseAlternative

        % Parse 0 or more extra ChooseAlternatives
        {[
            | pWhen: % If we encounter another 'when', there must be another ChooseAlternative
                @ChooseAlternative
            | *:
                .sCaseEnd
                >
        ]}

        % Parse the optional else alternative
        [
            | pElse:
                .sCaseElse
                @Block
        ]

        % Make sure we parse a proper ending to the choose
        pEnd
        pSemicolon;

ChooseAlternative :
        % A choose alternative is a Block labelled by
        % one or more optionally signed integer constants
        % We assume the 'when' has already been consumed
        {
            % I'm assuming the const values in choose must still be of this type
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        .sLabelEnd
        pThen
        % This is now a Block. Block will handle the emission of sBegin and sEnd
        @Block;

WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        % Previous Statement -> Block
        @Block
        % Handle the end stuff (I'm starting to rethink if this is necessary?)
        pEnd
        pSemicolon;

RepeatStmt :
        .sRepeatStmt
        @Block % Block will return when it encounters 'while', after emitting sBegin and sEnd 
        pWhile
        @Expression
        .sNot % We negate the expression since sRepeatStmt terminates loop on true expression
        .sExpnEnd
        pSemicolon;

Expression :
        @SimpleExpression
        [
            | '=':
                @SimpleExpression  .sEq
            | '!=':
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
            | '||': % Added string repeat operator
                @Term .sRepeatString
            | '|': # Added string concatenation operator
                @Term .sConcatenate
            | *:
                >
        ]};

Term :
        @Factor
        {[
            | '*':
                @Factor  .sMultiply
            % For '/', it's either integer division or substring
            | '/':
                % unit following '/' will be Factor in either case
                @Factor
                [
                    % If following token is ':', then it must be substring
                    | ':':
                        @Factor .sSubstring
                    % Anything else means this was integer division
                    | *:
                        .sDivide
                ]
            | '%':
                @Factor  .sModulus
            | 'and':
                .sInfixAnd  @Factor  .sAnd
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | 'not':
                @Factor
                .sNot
            | '#': % Added string length operator
                @Factor
                .sLength
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end
