### START OF PROGRAM OUTPUT ###
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,6
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    movb    $1,u+4
    movl    $3,n
    movl    $2,%eax
    cmpl    $1,%eax
    jg    f1
    movb    $1,%al
    jmp    f2
f1:    movb    $0,%al
f2:    movb    %al,u+4
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tInitialValue)
  | tInitialValue:
  @OperandPushExpression
   [ (tLiteralBoolean)
   | tLiteralBoolean:
   oOperandPushBoolean
   ] or >
   }
   [ (tInitEnd)
   | *:
   ] or >
   >>
  ;OperandPushExpression
  ?tInitEnd (tInitEnd)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  [ (tStoreBoolean)
  | tStoreBoolean:
  oOperandSetLength(one)
  @OperandAssignBooleanPopPop
   @OperandConvertJumpConditionToData
    [ oOperandIsJumpCondition (no)
    | no:
    ] or >
    >>
   ;OperandConvertJumpConditionToData
   oOperandSetLength(one)
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   >>
  ;OperandAssignBooleanPopPop
  ] or >
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLT)
    | tLT:
    @OperandLessPop
     oOperandSwap
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (one)
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue (two)
      | *:
      oOperandSwap
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oOperandPushCopy
       @OperandForceIntoTemp
        [ oOperandChooseMode (mManifest)
        | *:
        [ oOperandChooseLength (two)
        | two:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        ] or >
        oOperandSwap
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSetMode(mTemp)
        >>
       ;OperandForceIntoTemp
       oOperandSwap
       oOperandSwapRightAndDest
       oEmitDouble(iCmp)
       oOperandSwap
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJgt)
      ] or >
      >>
     ;OperandGreaterPop
     >>
    ;OperandLessPop
    ] or >
    }
    [ (tNot)
    | tNot:
    [ (tAssignBoolean)
    | tAssignBoolean:
    @OperandNotAssignPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     [ oOperandIsJumpCondition (yes)
     | yes:
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJgt)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      >>
     ;OperandNot
     @OperandAssignBooleanPopPop
      @OperandConvertJumpConditionToData
       [ oOperandIsJumpCondition (yes)
       | yes:
       [ oOperandChooseJumpCondition (iJle)
       | *:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       @OperandInfixOr
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        oEmitConditionalForwardBranch
        oFixAndFreeFalseBranches
        oFixPushLastAddress
        oOperandMergeShuntsWithAddress
        oFixPopAddress
        >>
       ;OperandInfixOr
       @OperandPushTrueTemp
        @OperandPushTempByte
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(one)
         >>
        ;OperandPushTempByte
        oOperandPushMode(mManifest)
        oOperandSetValue(one)
        oOperandSetLength(one)
        oEmitDouble(iMov)
        oOperandPop
        >>
       ;OperandPushTrueTemp
       oEmitUnconditionalForwardBranch
       oFixPushLastAddress
       oOperandSwap
       oFixAndFreeShuntList
       oOperandPop
       oOperandPushMode(mManifest)
       oOperandSetValue(zero)
       oOperandSetLength(one)
       oEmitDouble(iMov)
       oOperandPop
       oFixForwardBranch
       oFixPopAddress
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandConvertJumpConditionToData
      oOperandSetLength(one)
      @EmitMove
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        >>yes
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (yes)
       | yes:
       oEmitDouble(iMov)
       ] or >
       >>
      ;EmitMove
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      >>
     ;OperandAssignBooleanPopPop
     ] or >
     ] or >
     >>
    ;OperandNotAssignPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
