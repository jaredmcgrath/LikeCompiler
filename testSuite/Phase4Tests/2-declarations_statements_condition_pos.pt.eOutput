### START OF PROGRAM OUTPUT ###
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,8
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    movl    $3,n
    movb    $1,%al
    movb    %al,u+4
    movl    $6,n
    movl    $1,%eax
    cmpl    $0,%eax
    jne    f1
    movb    $1,%al
    jmp    f2
f1:    movb    $0,%al
f2:    movb    %al,u+5
    movl    $9,n
    movl    $2,%eax
    cmpl    $1,%eax
    jle    f3
    movb    $1,%al
    jmp    f4
f3:    movb    $0,%al
f4:    movb    %al,u+6
    movl    $12,n
    movl    $2,%eax
    cmpl    $0,%eax
    jg    f5
    movb    $1,%al
    jmp    f6
f5:    movb    $0,%al
f6:    movb    %al,u+7
    incl    n
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tEQ)
    | tEQ:
    @OperandEqualPop
     [ oOperandCompareLeftAndRight (yes)
     | yes:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushJumpCondition(iJalways)
     ] or >
     >>
    ;OperandEqualPop
    ] or >
    }
    [ (tAssignBoolean)
    | tAssignBoolean:
    @OperandAssignBooleanPopPop
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (yes)
      | yes:
      [ oOperandChooseJumpCondition (iJalways)
      | iJalways:
      oFixAndFreeShuntList
      oFixAndFreeFalseBranches
      oOperandPop
      @OperandPushTrueTemp
       @OperandPushTempByte
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(one)
        >>
       ;OperandPushTempByte
       oOperandPushMode(mManifest)
       oOperandSetValue(one)
       oOperandSetLength(one)
       oEmitDouble(iMov)
       oOperandPop
       >>
      ;OperandPushTrueTemp
      ] or >
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     oOperandSetLength(one)
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       >>yes
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (yes)
      | yes:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;OperandAssignBooleanPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tEQ)
    | tEQ:
    @OperandEqualPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     [ oOperandChooseManifestValue (zero)
     | zero:
     oOperandPop
     @EmitTst
      [ oOperandChooseLength (two)
      | two:
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(two)
      ] or >
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oOperandPushCopy
       @OperandForceIntoTemp
        [ oOperandChooseMode (mManifest)
        | *:
        [ oOperandChooseLength (two)
        | two:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        ] or >
        oOperandSwap
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSetMode(mTemp)
        >>
       ;OperandForceIntoTemp
       oOperandSwap
       oOperandSwapRightAndDest
       oEmitDouble(iCmp)
       oOperandSwap
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       >>
      ;EmitCmp
      oOperandPop
      >>
     ;EmitTst
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushJumpCondition(iJeq)
     ] or >
     ] or >
     >>
    ;OperandEqualPop
    ] or >
    }
    [ (tAssignBoolean)
    | tAssignBoolean:
    @OperandAssignBooleanPopPop
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (yes)
      | yes:
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      @OperandNot
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       @OperandComplementJumpCondition
        [ oOperandChooseJumpCondition (iJeq)
        | *:
        oOperandComplementJumpCondition
        >>
       ;OperandComplementJumpCondition
       >>
      ;OperandNot
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJne)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @OperandPushTrueTemp
       @OperandPushTempByte
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(one)
        >>
       ;OperandPushTempByte
       oOperandPushMode(mManifest)
       oOperandSetValue(one)
       oOperandSetLength(one)
       oEmitDouble(iMov)
       oOperandPop
       >>
      ;OperandPushTrueTemp
      oEmitUnconditionalForwardBranch
      oFixPushLastAddress
      oOperandSwap
      oFixAndFreeShuntList
      oOperandPop
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(one)
      oEmitDouble(iMov)
      oOperandPop
      oFixForwardBranch
      oFixPopAddress
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     oOperandSetLength(one)
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       >>yes
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (yes)
      | yes:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;OperandAssignBooleanPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tGT)
    | tGT:
    @OperandGreaterPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     [ oOperandChooseManifestValue (one)
     | *:
     oOperandSwap
     [ oOperandChooseManifestValue (two)
     | *:
     oOperandSwap
     @EmitCmp
      oOperandSwap
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oOperandPushCopy
      @OperandForceIntoTemp
       [ oOperandChooseMode (mManifest)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      oOperandSwap
      oOperandSwapRightAndDest
      oEmitDouble(iCmp)
      oOperandSwap
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      >>
     ;EmitCmp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushJumpCondition(iJgt)
     ] or >
     >>
    ;OperandGreaterPop
    ] or >
    }
    [ (tAssignBoolean)
    | tAssignBoolean:
    @OperandAssignBooleanPopPop
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (yes)
      | yes:
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      @OperandNot
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       @OperandComplementJumpCondition
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        oOperandComplementJumpCondition
        >>
       ;OperandComplementJumpCondition
       >>
      ;OperandNot
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJle)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @OperandPushTrueTemp
       @OperandPushTempByte
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(one)
        >>
       ;OperandPushTempByte
       oOperandPushMode(mManifest)
       oOperandSetValue(one)
       oOperandSetLength(one)
       oEmitDouble(iMov)
       oOperandPop
       >>
      ;OperandPushTrueTemp
      oEmitUnconditionalForwardBranch
      oFixPushLastAddress
      oOperandSwap
      oFixAndFreeShuntList
      oOperandPop
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(one)
      oEmitDouble(iMov)
      oOperandPop
      oFixForwardBranch
      oFixPopAddress
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     oOperandSetLength(one)
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       >>yes
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (yes)
      | yes:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;OperandAssignBooleanPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tLT)
    | tLT:
    @OperandLessPop
     oOperandSwap
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (two)
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue (one)
      | one:
      oOperandPop
      @EmitTst
       [ oOperandChooseLength (two)
       | two:
       oOperandPushMode(mManifest)
       oOperandSetValue(zero)
       oOperandSetLength(two)
       ] or >
       @EmitCmp
        oOperandSwap
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mManifest)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         ] or >
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         >>
        ;OperandForceIntoTemp
        oOperandSwap
        oOperandSwapRightAndDest
        oEmitDouble(iCmp)
        oOperandSwap
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        >>
       ;EmitCmp
       oOperandPop
       >>
      ;EmitTst
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJle)
      ] or >
      ] or >
      >>
     ;OperandGreaterPop
     >>
    ;OperandLessPop
    ] or >
    }
    [ (tAssignBoolean)
    | tAssignBoolean:
    @OperandAssignBooleanPopPop
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (yes)
      | yes:
      [ oOperandChooseJumpCondition (iJle)
      | *:
      @OperandNot
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       @OperandComplementJumpCondition
        [ oOperandChooseJumpCondition (iJle)
        | *:
        oOperandComplementJumpCondition
        >>
       ;OperandComplementJumpCondition
       >>
      ;OperandNot
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJgt)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @OperandPushTrueTemp
       @OperandPushTempByte
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(one)
        >>
       ;OperandPushTempByte
       oOperandPushMode(mManifest)
       oOperandSetValue(one)
       oOperandSetLength(one)
       oEmitDouble(iMov)
       oOperandPop
       >>
      ;OperandPushTrueTemp
      oEmitUnconditionalForwardBranch
      oFixPushLastAddress
      oOperandSwap
      oFixAndFreeShuntList
      oOperandPop
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(one)
      oEmitDouble(iMov)
      oOperandPop
      oFixForwardBranch
      oFixPopAddress
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     oOperandSetLength(one)
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       >>yes
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (yes)
      | yes:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;OperandAssignBooleanPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
