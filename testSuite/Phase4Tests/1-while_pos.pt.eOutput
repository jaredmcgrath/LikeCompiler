### START OF PROGRAM OUTPUT ###
         4         3         2         1         0
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,8
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    movl    $3,n
    movl    $5,u+4
b1:    movl    $4,n
    cmpl    $0,u+4
    jle    f2
    incl    n
    decl    u+4
    incl    n
    pushl    u+0
    pushl    u+4
    pushl    $10
    call    pttrap8
    addl    $12,%esp
    jmp    b1
f2:    movl    $8,n
    pushl    u+0
    call    pttrap6
    addl    $4,%esp
    incl    n
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tWhileBegin)
  | tWhileBegin:
  @WhileStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tGT)
     | tGT:
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (zero)
      | zero:
      oOperandPop
      @EmitTst
       [ oOperandChooseLength (two)
       | two:
       oOperandPushMode(mManifest)
       oOperandSetValue(zero)
       oOperandSetLength(two)
       ] or >
       @EmitCmp
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iCmp)
        ] or >
        >>
       ;EmitCmp
       oOperandPop
       >>
      ;EmitTst
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJgt)
      ] or >
      ] or >
      >>
     ;OperandGreaterPop
     ] or >
     }
     [ (tWhileTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tWhileTest (tWhileTest)
   @OperandComplementJumpCondition
    [ oOperandChooseJumpCondition (iJgt)
    | *:
    oOperandComplementJumpCondition
    >>
   ;OperandComplementJumpCondition
   [ oOperandChooseJumpCondition (iJle)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJle)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    @Block
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tSubtract)
       | tSubtract:
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandSubtractAssignPopPopPop
        oOperandSwap
        [ oOperandCompareRightAndDest (yes)
        | yes:
        oOperandPop
        @OperandSubtractRightFromLeftPop
         [ oOperandChooseManifestValue (one)
         | one:
         oOperandPop
         oEmitSingle(iDec)
         ] or >
         >>
        ;OperandSubtractRightFromLeftPop
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandSubtractAssignPopPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tWriteBegin)
     | tWriteBegin:
     @WriteProc
      oEmitSourceCoordinate
      [ (tTrapBegin)
      | *:
      @WriteParameter
       ?tTrapBegin (tTrapBegin)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tParmEnd)
       | *:
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       ?tTrap (tTrap)
       oOperandPushTrap
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(twelve)
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       >>
      ;WriteParameter
      }
      [ (tWriteEnd)
      | tWriteEnd:
      ] or >
      >>
     ;WriteProc
     ] or >
     }
     [ (tWhileEnd)
     | *:
     ] or >
     >>
    ;Block
    >>
   ;Statements
   ?tWhileEnd (tWhileEnd)
   oEmitUnconditionalBackwardBranch
   oFixPopAddress
   oFixAndFreeShuntList
   oOperandPop
   >>
  ;WhileStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
