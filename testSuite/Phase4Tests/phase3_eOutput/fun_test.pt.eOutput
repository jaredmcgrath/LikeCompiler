### START OF PROGRAM OUTPUT ###
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,12
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    jmp    f1
p13:    pushl   %ebp
        movl    %esp, %ebp    
    movl    8(%ebp),%eax
    movl    %eax,u+8
    movl    12(%ebp),%eax
    movl    %eax,u+4
    movl    $3,n
    movl    u+4,%eax
    movl    $10,%ebx
    addl    u+8,%ebx
    movl    %ebx,(%eax)
    leave    
    ret    
f1:    movl    $5,n
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreInteger)
   | tStoreInteger:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      ] or >
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      ] or >
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       @OperandAddPop
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | no:
        [ oOperandChooseManifestValue (trReadInteger)
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandForceLeftIntoTemp
         oOperandSwap
         [ oOperandChooseMode (mManifest)
         | *:
         @OperandForceIntoTemp
          [ oOperandChooseMode (mManifest)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          ] or >
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          >>
         ;OperandForceIntoTemp
         oOperandSwap
         >>
        ;OperandForceLeftIntoTemp
        oEmitDouble(iAdd)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAddPop
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
