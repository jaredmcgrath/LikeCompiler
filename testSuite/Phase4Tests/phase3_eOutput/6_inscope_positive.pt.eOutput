### START OF PROGRAM OUTPUT ###
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,516
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    .data    
s16:    .asciz  "string"
    .text    
    pushl    %eax
    pushl    %ebx
    pushl    %ecx
    pushl    %edx
    lea    s16,%eax
    pushl    %eax
    lea    u+4,%eax
    pushl    %eax
    call    pttrap101
    addl    $8,%esp
    popl    %edx
    popl    %ecx
    popl    %ebx
    popl    %eax
    movl    $5,n
    incl    n
    .data    
s49:    .asciz  "replacement"
    .text    
    pushl    %eax
    pushl    %ebx
    pushl    %ecx
    pushl    %edx
    lea    s49,%eax
    pushl    %eax
    lea    u+4,%eax
    pushl    %eax
    call    pttrap101
    addl    $8,%esp
    popl    %edx
    popl    %ecx
    popl    %ebx
    popl    %eax
    pushl    %eax
    pushl    %ebx
    pushl    %ecx
    pushl    %edx
    lea    u+4,%eax
    pushl    %eax
    lea    u+260,%eax
    pushl    %eax
    call    pttrap101
    addl    $8,%esp
    popl    %edx
    popl    %ecx
    popl    %ebx
    popl    %eax
    movl    $9,n
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tInitialValue)
  | tInitialValue:
  @OperandPushExpression
   [ (tSkipString)
   | tSkipString:
   oEmitNone(iData)
   ?tStringData (tStringData)
   oEmitString
   oEmitNone(iText)
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tFetchChar)
    | *:
    [ (tFetchChar)
    | *:
    [ (tFetchChar)
    | tFetchChar:
    oOperandSetLength(regCX)
    ] or >
    >>
   ;OperandPushVariable
   ] or >
   }
   [ (tInitEnd)
   | *:
   ] or >
   >>
  ;OperandPushExpression
  ?tInitEnd (tInitEnd)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  [ (tStoreChar)
  | tStoreChar:
  oOperandSetLength(regCX)
  @OperandAssignCharPopPop
   @SaveTempRegsToStack
    oOperandPushMode(mTemp)
    oOperandSetLength(two)
    oOperandSetRegnum(one)
    oEmitSingle(iPush)
    oOperandSetRegnum(two)
    oEmitSingle(iPush)
    oOperandSetRegnum(regCX)
    oEmitSingle(iPush)
    oOperandSetRegnum(four)
    oEmitSingle(iPush)
    oOperandPop
    >>
   ;SaveTempRegsToStack
   @OperandForceAddressIntoTemp
    [ oOperandChooseMode (mStatic)
    | mStatic:
    @OperandPushTempWord
     oTempAllocate
     oOperandPushTemp
     oOperandSetValue(zero)
     oOperandSetLength(two)
     >>
    ;OperandPushTempWord
    oOperandSwap
    oEmitDouble(iLoada)
    oOperandPop
    ] or >
    oOperandSetLength(two)
    >>
   ;OperandForceAddressIntoTemp
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStack)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandForceAddressIntoTemp
    [ oOperandChooseMode (mStatic)
    | mStatic:
    @OperandPushTempWord
     oTempAllocate
     oOperandPushTemp
     oOperandSetValue(zero)
     oOperandSetLength(two)
     >>
    ;OperandPushTempWord
    oOperandSwap
    oEmitDouble(iLoada)
    oOperandPop
    ] or >
    oOperandSetLength(two)
    >>
   ;OperandForceAddressIntoTemp
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStack)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushMode(mTrap)
   oOperandSetValue(trAssignString)
   oOperandSetLength(two)
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(eight)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   @RestoreTempRegsFromStack
    oOperandPushMode(mTemp)
    oOperandSetLength(two)
    oOperandSetRegnum(four)
    oEmitSingle(iPop)
    oOperandSetRegnum(regCX)
    oEmitSingle(iPop)
    oOperandSetRegnum(two)
    oEmitSingle(iPop)
    oOperandSetRegnum(one)
    oEmitSingle(iPop)
    oOperandPop
    >>
   ;RestoreTempRegsFromStack
   >>
  ;OperandAssignCharPopPop
  ] or >
  ] or >
  }
  [ (tIfBegin)
  | tIfBegin:
  @IfStmt
   oEmitSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tEQ)
     | tEQ:
     @OperandEqualPop
      [ oOperandCompareLeftAndRight (yes)
      | yes:
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJalways)
      ] or >
      >>
     ;OperandEqualPop
     ] or >
     }
     [ (tIfThen)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tIfThen (tIfThen)
   [ oOperandChooseJumpCondition (iJalways)
   | iJalways:
   @FoldIfStmt
    [ oOperandChooseJumpCondition (iJalways)
    | iJalways:
    oFixAndFreeShuntList
    oFixAndFreeFalseBranches
    @Statements
     @Block
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tSkipString)
        | *:
        [ (tSkipString)
        | *:
        [ (tSkipString)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tSkipString)
        | tSkipString:
        oEmitNone(iData)
        ?tStringData (tStringData)
        oEmitString
        oEmitNone(iText)
        ] or >
        }
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | tFetchChar:
         oOperandSetLength(regCX)
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tAssignChar)
        | tAssignChar:
        @OperandAssignCharPopPop
         @SaveTempRegsToStack
          oOperandPushMode(mTemp)
          oOperandSetLength(two)
          oOperandSetRegnum(one)
          oEmitSingle(iPush)
          oOperandSetRegnum(two)
          oEmitSingle(iPush)
          oOperandSetRegnum(regCX)
          oEmitSingle(iPush)
          oOperandSetRegnum(four)
          oEmitSingle(iPush)
          oOperandPop
          >>
         ;SaveTempRegsToStack
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mTrap)
         oOperandSetValue(trAssignString)
         oOperandSetLength(two)
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(eight)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         @RestoreTempRegsFromStack
          oOperandPushMode(mTemp)
          oOperandSetLength(two)
          oOperandSetRegnum(four)
          oEmitSingle(iPop)
          oOperandSetRegnum(regCX)
          oEmitSingle(iPop)
          oOperandSetRegnum(two)
          oEmitSingle(iPop)
          oOperandSetRegnum(one)
          oEmitSingle(iPop)
          oOperandPop
          >>
         ;RestoreTempRegsFromStack
         >>
        ;OperandAssignCharPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tIfEnd)
      | *:
      ] or >
      >>
     ;Block
     >>
    ;Statements
    @SkipToEndIf
     [ (tIfEnd)
     | tIfEnd:
     ] or >
     >>
    ;SkipToEndIf
    ] or >
    >>
   ;FoldIfStmt
   oOperandPop
   ] or >
   >>
  ;IfStmt
  ] or >
  }
  [ (tInitialValue)
  | tInitialValue:
  @OperandPushExpression
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tFetchChar)
    | *:
    [ (tFetchChar)
    | *:
    [ (tFetchChar)
    | tFetchChar:
    oOperandSetLength(regCX)
    ] or >
    >>
   ;OperandPushVariable
   ] or >
   }
   [ (tInitEnd)
   | *:
   ] or >
   >>
  ;OperandPushExpression
  ?tInitEnd (tInitEnd)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  [ (tStoreChar)
  | tStoreChar:
  oOperandSetLength(regCX)
  @OperandAssignCharPopPop
   @SaveTempRegsToStack
    oOperandPushMode(mTemp)
    oOperandSetLength(two)
    oOperandSetRegnum(one)
    oEmitSingle(iPush)
    oOperandSetRegnum(two)
    oEmitSingle(iPush)
    oOperandSetRegnum(regCX)
    oEmitSingle(iPush)
    oOperandSetRegnum(four)
    oEmitSingle(iPush)
    oOperandPop
    >>
   ;SaveTempRegsToStack
   @OperandForceAddressIntoTemp
    [ oOperandChooseMode (mStatic)
    | mStatic:
    @OperandPushTempWord
     oTempAllocate
     oOperandPushTemp
     oOperandSetValue(zero)
     oOperandSetLength(two)
     >>
    ;OperandPushTempWord
    oOperandSwap
    oEmitDouble(iLoada)
    oOperandPop
    ] or >
    oOperandSetLength(two)
    >>
   ;OperandForceAddressIntoTemp
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStack)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandForceAddressIntoTemp
    [ oOperandChooseMode (mStatic)
    | mStatic:
    @OperandPushTempWord
     oTempAllocate
     oOperandPushTemp
     oOperandSetValue(zero)
     oOperandSetLength(two)
     >>
    ;OperandPushTempWord
    oOperandSwap
    oEmitDouble(iLoada)
    oOperandPop
    ] or >
    oOperandSetLength(two)
    >>
   ;OperandForceAddressIntoTemp
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStack)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushMode(mTrap)
   oOperandSetValue(trAssignString)
   oOperandSetLength(two)
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(eight)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   @RestoreTempRegsFromStack
    oOperandPushMode(mTemp)
    oOperandSetLength(two)
    oOperandSetRegnum(four)
    oEmitSingle(iPop)
    oOperandSetRegnum(regCX)
    oEmitSingle(iPop)
    oOperandSetRegnum(two)
    oEmitSingle(iPop)
    oOperandSetRegnum(one)
    oEmitSingle(iPop)
    oOperandPop
    >>
   ;RestoreTempRegsFromStack
   >>
  ;OperandAssignCharPopPop
  ] or >
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
