### START OF PROGRAM OUTPUT ###
         0
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,8
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    movl    $1,u+4
    movl    $4,n
    jmp    f1
v26:    movl    $4,n
    movl    $6,n
    incl    u+4
    jmp    m22
a22:b2:    movl    $7,n
    incl    n
    decl    u+4
    jmp    m22
f1:    movl    u+4,%eax
    cmpl    $0,%eax
    ja    b2
    shl    $2,%eax
    movl    c22(%eax),%eax
    jmp    *%eax
    .data    
c22:    .long    v26
    .text    
m22:    movl    $9,n
    movl    $11,n
    pushl    u+0
    pushl    u+4
    pushl    $10
    call    pttrap8
    addl    $12,%esp
    incl    n
    pushl    u+0
    call    pttrap6
    addl    $4,%esp
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tInitialValue)
  | tInitialValue:
  @OperandPushExpression
   [ (tLiteralInteger)
   | tLiteralInteger:
   oOperandPushInteger
   ] or >
   }
   [ (tInitEnd)
   | *:
   ] or >
   >>
  ;OperandPushExpression
  ?tInitEnd (tInitEnd)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  [ (tStoreInteger)
  | tStoreInteger:
  oOperandSetLength(two)
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  ] or >
  }
  [ (tCaseBegin)
  | tCaseBegin:
  @CaseStmt
   oEmitSourceCoordinate
   oCasePush
   oCaseEnterTCodeAddress
   @OperandPushExpression
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchInteger)
     | *:
     [ (tFetchInteger)
     | *:
     [ (tFetchInteger)
     | tFetchInteger:
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tCaseSelect)
    | *:
    ] or >
    >>
   ;OperandPushExpression
   @OperandFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    >>
   ;OperandFreeTemp
   ?tCaseSelect (tCaseSelect)
   @CaseSelect
    oEmitUnconditionalForwardBranch
    oFixPushLastAddress
    >>
   ;CaseSelect
   [ (tAssignBegin)
   | *:
   @CaseVariant
    oCaseEnterVariantAddress
    oEmitMergeSourceCoordinate
    @Statements
     @Block
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tAdd)
        | tAdd:
        [ (tAssignInteger)
        | tAssignInteger:
        @OperandAddAssignPopPopPop
         [ oOperandCompareRightAndDest (no)
         | *:
         oOperandSwap
         [ oOperandCompareRightAndDest (yes)
         | yes:
         oOperandPop
         @OperandAddRightToLeftPop
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          oEmitSingle(iInc)
          ] or >
          >>
         ;OperandAddRightToLeftPop
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         >>
        ;OperandAddAssignPopPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tCaseMerge)
      | *:
      ] or >
      >>
     ;Block
     >>
    ;Statements
    ?tCaseMerge (tCaseMerge)
    oEmitCaseMergeBranch
    >>
   ;CaseVariant
   }
   [ (tCaseEnd)
   | tCaseEnd:
   ] or >
   @CaseEnd
    @EmitDefaultCaseAbort
     oCaseEnterAbortAddress
     oFixPushAddress
     oFixSwapAddresses
     oEmitMergeSourceCoordinate
     [ (tCaseElse)
     | tCaseElse:
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tSubtract)
         | tSubtract:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandSubtractAssignPopPopPop
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandSubtractRightFromLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iDec)
           ] or >
           >>
          ;OperandSubtractRightFromLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandSubtractAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tCaseElseEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tCaseElseEnd (tCaseElseEnd)
     oEmitCaseMergeBranch
     ] or >
     >>
    ;EmitDefaultCaseAbort
    oFixForwardBranch
    oFixPopAddress
    @EmitCaseSubscriptJump
     @OperandForceIntoTemp
      [ oOperandChooseMode (mStatic)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      ] or >
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      >>
     ;OperandForceIntoTemp
     oOperandPushCaseLow
     @OperandSubtractRightFromLeftPop
      [ oOperandChooseManifestValue (zero)
      | zero:
      oOperandPop
      ] or >
      >>
     ;OperandSubtractRightFromLeftPop
     [ oOptionTestChecking (yes)
     | yes:
     oOperandPushCaseHigh
     oOperandPushCaseLow
     oOperandSubtractManifestValues
     oOperandPop
     oEmitDouble(iCmp)
     oOperandPop
     oOperandPushJumpCondition(iJhi)
     oEmitConditionalBackwardBranch
     oFixPopAddress
     oOperandPop
     ] or >
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(two)
     oEmitDouble(iShl)
     oOperandPop
     oOperandPushCopy
     oOperandEnterValueFromCaseTableAddress
     oOperandSetMode(mTempIndirectCaseOffset)
     oEmitDouble(iMov)
     oOperandPop
     oOperandSetMode(mTempIndirect)
     oEmitSingle(iJmp)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTempIndirect)
      | mTempIndirect:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;EmitCaseSubscriptJump
    oEmitCaseBranchTable
    oCaseEnterMergeAddress
    oEmitMergeSourceCoordinate
    >>
   ;CaseEnd
   oCasePop
   >>
  ;CaseStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
