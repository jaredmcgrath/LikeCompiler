### COMPILER WARNINGS ###
line 5: subscript [3] out of bounds [1 .. 1]
### START OF PROGRAM OUTPUT ###
### END OF PROGRAM OUTPUT ###
### START OF ASSEMBLY SOURCE ###
    .data    
    .comm    u,268
n:    .long    0
    .text    
    .globl    ptmain
ptmain:    pushl   %ebp
        movl    %esp, %ebp    
    movl    $2,u+0
    movl    $1,u+4
    movl    $1,u+8
    movl    $5,n
    .data    
s35:    .asciz  "string"
    .text    
    pushl    %eax
    pushl    %ebx
    pushl    %ecx
    pushl    %edx
    lea    s35,%eax
    pushl    %eax
    lea    u+4,%eax
    pushl    %eax
    call    pttrap101
    addl    $8,%esp
    popl    %edx
    popl    %ecx
    popl    %ebx
    popl    %eax
    call    pttrap0
    leave    
    ret    
### END OF ASSEMBLY SOURCE ###
### START OF SSLTRACE ###
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     line 5: subscript [3] out of bounds [1 .. 1]
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
### END OF SSLTRACE ###
